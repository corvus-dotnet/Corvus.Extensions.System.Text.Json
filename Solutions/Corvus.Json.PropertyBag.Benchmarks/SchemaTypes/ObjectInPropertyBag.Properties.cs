//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Marain.Tenancy.ClientTenantProvider.TenancyClientSchemaTypes;
/// <summary>
/// A type generated from a JsonSchema specification.
/// </summary>
public readonly partial struct ObjectInPropertyBag
{
    /// <summary>
    /// JSON property name for <see cref = "IntValue"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> IntValueUtf8JsonPropertyName = new byte[]{105, 110, 116, 86, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "IntValue"/>.
    /// </summary>
    public const string IntValueJsonPropertyName = "intValue";
    /// <summary>
    /// JSON property name for <see cref = "BoolValue"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> BoolValueUtf8JsonPropertyName = new byte[]{98, 111, 111, 108, 86, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "BoolValue"/>.
    /// </summary>
    public const string BoolValueJsonPropertyName = "boolValue";
    /// <summary>
    /// JSON property name for <see cref = "StringValue"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> StringValueUtf8JsonPropertyName = new byte[]{115, 116, 114, 105, 110, 103, 86, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "StringValue"/>.
    /// </summary>
    public const string StringValueJsonPropertyName = "stringValue";
    /// <summary>
    /// JSON property name for <see cref = "Int64Value"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> Int64ValueUtf8JsonPropertyName = new byte[]{105, 110, 116, 54, 52, 86, 97, 108, 117, 101};
    /// <summary>
    /// JSON property name for <see cref = "Int64Value"/>.
    /// </summary>
    public const string Int64ValueJsonPropertyName = "int64Value";
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public static readonly ReadOnlyMemory<byte> TypeUtf8JsonPropertyName = new byte[]{116, 121, 112, 101};
    /// <summary>
    /// JSON property name for <see cref = "Type"/>.
    /// </summary>
    public const string TypeJsonPropertyName = "type";
    /// <summary>
    /// Gets IntValue.
    /// </summary>
    public Corvus.Json.JsonInteger IntValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(IntValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(IntValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets BoolValue.
    /// </summary>
    public Corvus.Json.JsonBoolean BoolValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(BoolValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonBoolean(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(BoolValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonBoolean>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets StringValue.
    /// </summary>
    public Corvus.Json.JsonString StringValue
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(StringValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(StringValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Int64Value.
    /// </summary>
    public Corvus.Json.JsonInteger Int64Value
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(Int64ValueUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonInteger(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(Int64ValueJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonInteger>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Gets Type.
    /// </summary>
    public Corvus.Json.JsonString Type
    {
        get
        {
            if ((this.backing & Backing.JsonElement) != 0)
            {
                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                {
                    return default;
                }

                if (this.jsonElementBacking.TryGetProperty(TypeUtf8JsonPropertyName.Span, out JsonElement result))
                {
                    return new Corvus.Json.JsonString(result);
                }
            }

            if ((this.backing & Backing.Object) != 0)
            {
                if (this.objectBacking.TryGetValue(TypeJsonPropertyName, out JsonAny result))
                {
                    return result.As<Corvus.Json.JsonString>();
                }
            }

            return default;
        }
    }

    /// <summary>
    /// Creates an instance of a <see cref = "ObjectInPropertyBag"/>.
    /// </summary>
    public static ObjectInPropertyBag Create(Corvus.Json.JsonInteger intValue, Corvus.Json.JsonBoolean boolValue, Corvus.Json.JsonString stringValue, Corvus.Json.JsonInteger? int64Value = null, Corvus.Json.JsonString? type = null)
    {
        var builder = ImmutableDictionary.CreateBuilder<JsonPropertyName, JsonAny>();
        builder.Add(IntValueJsonPropertyName, intValue.AsAny);
        builder.Add(BoolValueJsonPropertyName, boolValue.AsAny);
        builder.Add(StringValueJsonPropertyName, stringValue.AsAny);
        if (int64Value is Corvus.Json.JsonInteger int64Value__)
        {
            builder.Add(Int64ValueJsonPropertyName, int64Value__.AsAny);
        }

        if (type is Corvus.Json.JsonString type__)
        {
            builder.Add(TypeJsonPropertyName, type__.AsAny);
        }

        return builder.ToImmutable();
    }

    /// <summary>
    /// Sets intValue.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ObjectInPropertyBag WithIntValue(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(IntValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets boolValue.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ObjectInPropertyBag WithBoolValue(in Corvus.Json.JsonBoolean value)
    {
        return this.SetProperty(BoolValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets stringValue.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ObjectInPropertyBag WithStringValue(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(StringValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets int64Value.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ObjectInPropertyBag WithInt64Value(in Corvus.Json.JsonInteger value)
    {
        return this.SetProperty(Int64ValueJsonPropertyName, value);
    }

    /// <summary>
    /// Sets type.
    /// </summary>
    /// <param name = "value">The value to set.</param>
    /// <returns>The entity with the updated property.</returns>
    public ObjectInPropertyBag WithType(in Corvus.Json.JsonString value)
    {
        return this.SetProperty(TypeJsonPropertyName, value);
    }

    private static ValidationContext __CorvusValidateIntValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateBoolValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonBoolean>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateStringValue(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateInt64Value(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonInteger>().Validate(validationContext, level);
    }

    private static ValidationContext __CorvusValidateType(in JsonObjectProperty property, in ValidationContext validationContext, ValidationLevel level)
    {
        return property.ValueAs<Corvus.Json.JsonString>().Validate(validationContext, level);
    }

    /// <summary>
    /// Tries to get the validator for the given property.
    /// </summary>
    /// <param name = "property">The property for which to get the validator.</param>
    /// <param name = "hasJsonElementBacking"><c>True</c> if the object containing the property has a JsonElement backing.</param>
    /// <param name = "propertyValidator">The validator for the property, if provided by this schema.</param>
    /// <returns><c>True</c> if the validator was found.</returns>
    private bool __TryGetCorvusLocalPropertiesValidator(in JsonObjectProperty property, bool hasJsonElementBacking, [NotNullWhen(true)] out ObjectPropertyValidator? propertyValidator)
    {
        if (hasJsonElementBacking)
        {
            if (property.NameEquals(IntValueUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateIntValue;
                return true;
            }
            else if (property.NameEquals(BoolValueUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateBoolValue;
                return true;
            }
            else if (property.NameEquals(StringValueUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateStringValue;
                return true;
            }
            else if (property.NameEquals(Int64ValueUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateInt64Value;
                return true;
            }
            else if (property.NameEquals(TypeUtf8JsonPropertyName.Span))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
        }
        else
        {
            if (property.NameEquals(IntValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateIntValue;
                return true;
            }
            else if (property.NameEquals(BoolValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateBoolValue;
                return true;
            }
            else if (property.NameEquals(StringValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateStringValue;
                return true;
            }
            else if (property.NameEquals(Int64ValueJsonPropertyName))
            {
                propertyValidator = __CorvusValidateInt64Value;
                return true;
            }
            else if (property.NameEquals(TypeJsonPropertyName))
            {
                propertyValidator = __CorvusValidateType;
                return true;
            }
        }

        propertyValidator = null;
        return false;
    }
}